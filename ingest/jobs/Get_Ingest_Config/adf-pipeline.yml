# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Sample YAML file to validate and export an ARM template into a build artifact
# Requires a package.json file located in the target repository

name: "$(Build.SourceBranchName)-init"


trigger:
#- main #collaboration branch
- none



pool:
  vmImage: 'ubuntu-latest'

variables:
  - template: ../../../de_build/adf/adf-pipeline-varsV1.yml
#  - template: de_build/adf/air-data-testing-vars.yml
  - name: job  #update job name
    value: 'Get_Ingest_Config'
  - name: self_repo_adf_dir
    value: "$(self_repo_dir)/ingest/jobs/$(job)/adfpipeline"
  - name: self_repo_blob_config
    value: "$(self_repo_dir)/ingest/config"
  - name: blob_config_destination
    value: config

stages:
- stage: Build_Stage
  variables:
      - group: amido-stacks-de-pipeline-nonprod
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
  jobs:
  - job: Build_Adf_Configfiles_Build
    displayName: 'ADF-CONFIGFILES-BUILD'

    steps:

    - task: CopyFiles@2
      displayName: 'Copy PreandPostDeploymnet File'
      inputs:
        SourceFolder: '$(self_repo_dir)/de_build/adf/'
        Contents: '*.ps1'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/ArmTemplates'

    - task: CopyFiles@2
      displayName: 'Copy ARM Files '
      inputs:
        SourceFolder: '$(self_repo_adf_dir)/'
        Contents: '*.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/ArmTemplates'

    - task: CopyFiles@2
      displayName: 'Copy Config Files '
      inputs:
        SourceFolder: '$(self_repo_blob_config)'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/ConfigFiles'

    # Validate ARM
    - script: |
        mkdir $(Pipeline.Workspace)/ARM_TTK_Download
        curl -L -o $(Pipeline.Workspace)/ARM_TTK_Download/arm-ttk.zip https://aka.ms/arm-ttk-latest
      displayName: 'Download ARM TTK'

    - script: |
        ls $(Pipeline.Workspace)/ARM_TTK_Download
      displayName: 'Verify: Check downloaded files'
    
    - task: ExtractFiles@1
      displayName: 'Extract ARM TTK'
      inputs:
        archiveFilePatterns: '$(Pipeline.Workspace)/ARM_TTK_Download/arm-ttk.zip'
        destinationFolder: '$(Pipeline.Workspace)/ARM_TTK'

    - script: |
        ls $(Pipeline.Workspace)/ARM_TTK
      displayName: 'List ARM TTK'

    - pwsh: |
        Import-Module $(Pipeline.Workspace)/ARM_TTK/arm-ttk/arm-ttk.psd1 -Verbose
        $templatePath = "$(Build.ArtifactStagingDirectory)/ArmTemplates/ARMTemplateForFactory.json"
        $templateParametersPath = "$(Build.ArtifactStagingDirectory)/ArmTemplates/ARMTemplateParametersForFactory.json"
        $testOutputtemplate = @(Test-AzTemplate -TemplatePath "$templatePath" -Skip "DeploymentTemplate-Schema-Is-Correct", "Template-Should-Not-Contain-Blanks","Variables-Must-Be-Referenced" ,"DeploymentTemplate-Must-Not-Contain-Hardcoded-Uri","DependsOn-Best-Practices")
        $testOutputParameters = @(Test-AzTemplate -TemplatePath "$templateParametersPath" )
        $testOutput = $testOutputParameters + $testOutputtemplate
        $testOutput
        
        if ($testOutput | ? {$_.Errors }) {
            exit 1 
        } else {
            Write-Host "##vso[task.setvariable variable=result.best.practice]$true"
            exit 0
        } 
      errorActionPreference: continue
      failOnStderr: true
      displayName: 'Run Best Practices Tests'
      continueOnError: true

        # Publish the artifact 
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ConfigFiles'
      inputs:
        ArtifactName: ConfigFiles
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/ConfigFiles'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ArmTemplates'
      inputs:
        ArtifactName: ArmTemplates
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/ArmTemplates'

#############################################################
# Deploy to non Prod
#############################################################
- stage: Deploy_NonPROD_Stage
  variables:
      - group: amido-stacks-de-pipeline-nonprod
      - group: amido-stacks-infra-credentials-nonprod
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
  dependsOn: Build_Stage
  jobs:
  - deployment: Deploy_NonPROD
    displayName: 'Deploy To NonPROD'
    environment: ${{ variables.domain }}-nonprod
    pool:
      vmImage: 'ubuntu-latest'

    strategy:
      runOnce:
        deploy:  
          steps:


           - task: DownloadPipelineArtifact@2
             displayName: Download Build Artifacts
             inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
           - script: dir
             displayName: List ConfigFiles Artifact in Workspace
             workingDirectory: '$(System.DefaultWorkingDirectory)/ConfigFiles'
           - script: dir
             displayName: List ArmTemplates Artifact in Workspace
             workingDirectory: '$(System.DefaultWorkingDirectory)/ArmTemplates'

    # Publish Config files
           - task: AzureCLI@2
             inputs:
               azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
               scriptType: 'pscore'
               scriptLocation: 'inlineScript'
               inlineScript: 'az storage blob upload-batch --source $(System.DefaultWorkingDirectory)/ConfigFiles --destination $(blob_config_destination) --account-name $(blob_configStorage) --overwrite'

    # Publish ADF
           - task: AzurePowerShell@5
             displayName: 'Stop ADF triggers'
             inputs:
              azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/ArmTemplates/PrePostDeploymentScriptLatest.ps1'
              ScriptArguments:  -armTemplate "$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json"
                              -ResourceGroupName $(resource_group)
                              -DataFactoryName $(datafactoryname)
                              -predeployment $true
                              -deleteDeployment $false
              azurePowerShellVersion: 'LatestVersion'

           - task: AzureResourceManagerTemplateDeployment@3
             displayName: 'ARM Template deployment: Resource Group scope'
             inputs:
                azureResourceManagerConnection: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
                subscriptionId: '$(azure_subscription_id)'
                resourceGroupName: $(resource_group)
                location: $(region)
                csmFile: '$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json'
                csmParametersFile: '$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateParametersForFactory.json'
                overrideParameters: -factoryName $(datafactoryname)
                                    -ls_Blob_ConfigStore_properties_typeProperties_serviceEndpoint $(Blob_ConfigStore_serviceEndpoint)
                deploymentMode: 'Incremental'

           - task: AzurePowerShell@5
             displayName: 'Clean resources and start ADF triggers'
             inputs:
              azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/ArmTemplates/PrePostDeploymentScriptLatest.ps1'
              ScriptArguments:  -armTemplate "$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json"
                              -ResourceGroupName $(resource_group)
                              -DataFactoryName $(datafactoryname)
                              -predeployment $false
                              -deleteDeployment $false
              azurePowerShellVersion: 'LatestVersion'

  #   # Start Testing 
  # - deployment: Test_NonPROD
  #   displayName: 'Testing  NonPROD'
  #   environment: ${{ variables.domain }}-nonprod
  #   dependsOn: Deploy_NonPROD
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   strategy:
  #     runOnce:
  #       deploy:  
  #         steps:
  #          - checkout: self
  #          - task: AzureCLI@2
  #            inputs:
  #              azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
  #              ScriptType: 'bash'
  #              scriptLocation: 'inlineScript'
  #              inlineScript: az account show 
           
  #          - task: UsePythonVersion@0
  #            inputs:
  #               versionSpec: '$(pythonVersion)'
  #               githubToken: '$(github_token)'
  #               addToPath: true

  #            displayName: Set Python Version

  #          - bash: |
  #             pip install pytest pylint pylint-exit pytest-azurepipelines pytest-cov poetry
  #            displayName: 'Install Pipeline Tools'
  #          - bash: |
  #             poetry install 
  #            displayName: 'Running poetry install'
  #            workingDirectory:  '$(self_repo_dir)'
  #          - bash: |
  #              python -m pytest $(test_unit_path)
  #            displayName: 'Running py test'
  #            workingDirectory:  '$(self_repo_dir)'

  #          - bash: |
  #              poetry run behave $(test_end_to_end_path)  --junit --junit-directory $(junit_path)
  #            displayName: 'Running e2e Test'
  #            workingDirectory:  '$(self_repo_dir)'
  #            env:
  #                 AZURE_SUBSCRIPTION_ID: $(azure_subscription_id)
  #                 AZURE_RESOURCE_GROUP_NAME: $(resource_group)
  #                 AZURE_DATA_FACTORY_NAME: $(datafactoryname)
  #                 AZURE_REGION_NAME: $(region)
  #                 AZURE_STORAGE_ACCOUNT_NAME: $(blob_adls_storage)
  #                 AZURE_CLIENT_ID: $(azure-client-id)
  #                 AZURE_CLIENT_SECRET: $(azure-client-secret)
  #                 AZURE_TENANT_ID: $(azure-tenant-id)   

  #          - task: PublishTestResults@2
  #            displayName: 'Publish Test Results'
  #            inputs:
  #               testResultsFiles: '**/*.xml'
  #               searchFolder: $(junit_path)
  #            condition: succeededOrFailed()
  

#############################################################
# Deploy to Prod
#############################################################
- stage: Deploy_Prod_Stage
  dependsOn: 
    - Build_Stage
    - Deploy_NonPROD_Stage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
      - group: amido-stacks-de-pipeline-prod
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
  jobs:
  - deployment: Deploy_PRDO
    displayName: 'Deploy To PROD'
    environment: ${{ variables.domain }}-prod
    pool:
      vmImage: 'ubuntu-latest'

    strategy:
      runOnce:
        deploy:  
          steps:


           - task: DownloadPipelineArtifact@2
             displayName: Download Build Artifacts
             inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
           - script: dir
             displayName: List ConfigFiles Artifact in Workspace
             workingDirectory: '$(System.DefaultWorkingDirectory)/ConfigFiles'
           - script: dir
             displayName: List ArmTemplates Artifact in Workspace
             workingDirectory: '$(System.DefaultWorkingDirectory)/ArmTemplates'

    # Publish Config files
           - task: AzureCLI@2
             inputs:
               azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
               scriptType: 'pscore'
               scriptLocation: 'inlineScript'
               inlineScript: 'az storage blob upload-batch --source $(System.DefaultWorkingDirectory)/ConfigFiles --destination $(blob_config_destination) --account-name $(blob_configStorage) --overwrite'

    # Publish ADF
           - task: AzurePowerShell@5
             displayName: 'Stop ADF triggers'
             inputs:
              azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/ArmTemplates/PrePostDeploymentScriptLatest.ps1'
              ScriptArguments:  -armTemplate "$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json"
                              -ResourceGroupName $(resource_group)
                              -DataFactoryName $(datafactoryname)
                              -predeployment $true
                              -deleteDeployment $false
              azurePowerShellVersion: 'LatestVersion'

           - task: AzureResourceManagerTemplateDeployment@3
             displayName: 'ARM Template deployment: Resource Group scope'
             inputs:
                azureResourceManagerConnection: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
                subscriptionId: '$(azure_subscription_id)'
                resourceGroupName: $(resource_group)
                location: $(region)
                csmFile: '$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json'
                csmParametersFile: '$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateParametersForFactory.json'
                overrideParameters: -factoryName $(datafactoryname)
                                    -ls_Blob_ConfigStore_properties_typeProperties_serviceEndpoint $(Blob_ConfigStore_serviceEndpoint)
                deploymentMode: 'Incremental'

           - task: AzurePowerShell@5
             displayName: 'Clean resources and start ADF triggers'
             inputs:
              azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/ArmTemplates/PrePostDeploymentScriptLatest.ps1'
              ScriptArguments:  -armTemplate "$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json"
                              -ResourceGroupName $(resource_group)
                              -DataFactoryName $(datafactoryname)
                              -predeployment $false
                              -deleteDeployment $false
              azurePowerShellVersion: 'LatestVersion'
 
- stage: Release
  dependsOn:
      - Build_Stage
      - Deploy_Prod_Stage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['create_release'], 'true'))
  variables:
      - group: amido-stacks-infra-credentials-nonprod
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
  jobs:
      - job: CreateGitHubRelease
        pool:
          vmImage: $(pool_vm_image)
        steps:
          # Check out the repo so that it can be tagged
          - checkout: self
            persistCredentials: true

          # Create a tag in the code for this release
          - task: Bash@3
            displayName: Tag Code
            inputs:
              targetType: "inline"
              script: |
                git config user.name "BuildService"
                git config user.email "builder@${COMPANY}.com"
                git tag -a v${VERSION_NUMBER} -m "Release created by Azure DevOps"
                git push origin v${VERSION_NUMBER}
            env:
              COMPANY: $(company)

          # Create a GitHub release with these packages
          - task: GitHubRelease@1
            displayName: Create GitHub Release
            inputs:
              gitHubConnection: $(github_release_service_connection)
              repositoryName: $(github_org)/$(self_repo)
              tag: v${VERSION_NUMBER}
              releaseNotesSource: 'inline'
              releaseNotesInline: "$(version_major).$(version_minor).$(version_revision)"
              tagSource: 'gitTag'
              changeLogCompareToRelease: 'lastFullRelease'
              changeLogType: 'commitBased'
