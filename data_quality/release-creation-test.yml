# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Sample YAML file to validate and export an ARM template into a build artifact
# Requires a package.json file located in the target repository

name: "$(Build.SourceBranchName)-init"

trigger:
- none

# pr:
#   - main

# trigger:
#   branches:
   
#     include:
#       - 'main'
#   paths:
#     include:
#       - data_quality/config/*
#       - data_quality/data-quality-config-pipeline.yml


variables:
  - template: ../de_build/job-pipeline-vars.yml
#  - template: de_build/adf/air-data-testing-vars.yml
  # - name: job  #update job name
  #   value: 'Generate_Ingest_Query'
  - name: self_repo_blob_config
    value: "$(self_repo_dir)/data_quality/config"
  - name: blob_config_destination
    value: config

pool:
  name: $(agentpool_name)

stages:
- stage: Release
  variables:
      - group: amido-stacks-infra-credentials-nonprod
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
  jobs:
      - job: CreateGitHubRelease
        pool:
          name: $(agentpool_name)
        steps:
          # Check out the repo so that it can be tagged
          - checkout: self
            persistCredentials: true

          # Create a tag in the code for this release
          # - task: Bash@3
          #   displayName: Tag Code
          #   inputs:
          #     targetType: "inline"
          #     script: |
          #       git config user.name "BuildService"
          #       git config user.email "builder@${COMPANY}.com"
          #       git tag -a v${VERSION_NUMBER} -m "Release created by Azure DevOps"
          #       git push origin v${VERSION_NUMBER}
          #   env:
          #     COMPANY: $(company)
          
          #   - checkout: self

          # Get the last tag from GitHub
          - script: |
              lastTag=$(git describe --tags --abbrev=0)
              echo "Last Tag: $lastTag"
              echo "##vso[task.setvariable variable=lastTag]$lastTag"
            displayName: Get Last Tag

          # Extract the version number from the last tag
          - script: |
              version=$(echo $(lastTag) | sed 's/^v//')
              echo "Version: $version"
              echo "##vso[task.setvariable variable=currentVersion]$version"
            displayName: Extract Version Number

            # Split the version into major, minor, and revision parts
          - script: |
              IFS='.' read -ra versionParts <<< "$(currentVersion)"
              major="${versionParts[0]}"
              minor="${versionParts[1]}"
              revision="${versionParts[2]}"
              echo "Major: $major"
              echo "Minor: $minor"
              echo "Revision: $revision"
              echo "##vso[task.setvariable variable=major]$major"
              echo "##vso[task.setvariable variable=minor]$minor"
              echo "##vso[task.setvariable variable=revision]$revision"
            displayName: Split Version Parts

          # Increment the version
          - script: |
              newRevision=$((revision + 1))
              newVersion="v${major}.${minor}.${newRevision}"
              echo "New Version: $newVersion"
              echo "##vso[task.setvariable variable=newVersion]$newVersion"
            displayName: Increment Version

          # Create a GitHub release with these packages
          # - task: GitHubRelease@1
          #   displayName: Create GitHub Release
          #   inputs:
          #     gitHubConnection: $(github_release_service_connection)
          #     repositoryName: $(github_org)/$(self_repo)
          #     tag: v${VERSION_NUMBER}
          #     releaseNotesSource: 'inline'
          #     releaseNotesInline: "$(version_major).$(version_minor).$(version_revision)"
          #     tagSource: 'gitTag'
          #     changeLogCompareToRelease: 'lastFullRelease'
          #     changeLogType: 'commitBased'
