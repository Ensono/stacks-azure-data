# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Sample YAML file to validate and export an ARM template into a build artifact
# Requires a package.json file located in the target repository

name: "$(Build.SourceBranchName)-init"

pr:
  - main

trigger:
  branches:
   
    include:
      - 'main'
  paths:
    include:
      - de_build/*
      - data_factory/*
      - config/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  - template: adf-pipeline-vars.yml
  - template: air-data-testing-vars.yml

stages:
- stage: Build_Stage
  variables:
      - group: amido-stacks-de-pipeline-nonprod
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
  jobs:
  - job: Build_Adf_Configfiles_Build
    displayName: 'ADF-CONFIGFILES-BUILD'

    steps:

    # Installs Node and the npm packages saved in your package.json file in the build

    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: '$(self_repo_dir)/de_build/adf' #replace with the package.json folder
        verbose: true
      displayName: 'Install npm package'

    # Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
    # Enter the appropriate subscription and name for the source factory. Either of the "Validate" or "Validate and Generate ARM temmplate" options are required to perform validation. Running both is unnecessary.

    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: '$(self_repo_dir)/de_build/adf' #replace with the package.json folder
        customCommand: 'run build validate $(self_repo_adf_dir) /subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group)/providers/Microsoft.DataFactory/factories/$(datafactoryname)'
      displayName: 'Validate'

    # Validate and then generate the ARM template into the destination folder, which is the same as selecting "Publish" from the UX.
    # The ARM template generated isn't published to the live version of the factory. Deployment should be done by using a CI/CD pipeline. 

    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: '$(self_repo_dir)/de_build/adf' #replace with the package.json folder
        customCommand: 'run build export $(self_repo_adf_dir) /subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group)/providers/Microsoft.DataFactory/factories/$(datafactoryname) "ArmTemplate"'
    #For using preview that allows you to only stop/ start triggers that are modified, please comment out the above line and uncomment the below line. Make sure the package.json contains the build-preview command. 
    #customCommand: 'run build-preview export $(Build.Repository.LocalPath) /subscriptions/222f1459-6ebd-4896-82ab-652d5f6883cf/resourceGroups/GartnerMQ2021/providers/Microsoft.DataFactory/factories/Dev-GartnerMQ2021-DataFactory "ArmTemplate"'
      displayName: 'Validate and Generate ARM template'

    # Publish the artifact to be used as a source for a release pipeline.

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: ArmTemplates'
      inputs:
        targetPath: '$(self_repo_dir)/de_build/adf/ArmTemplate' #replace with the package.json folder
        artifact: 'ArmTemplates'
        publishLocation: 'pipeline'

    - task: CopyFiles@2
      displayName: 'Copy Config Files '
      inputs:
        SourceFolder: '$(self_repo_blob_config)'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ConfigFiles'
      inputs:
        ArtifactName: ConfigFiles

#############################################################
# Deploy to non Prod
#############################################################
- stage: Deploy_NonPROD_Stage
  variables:
      - group: amido-stacks-de-pipeline-nonprod
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
  dependsOn: Build_Stage
  jobs:
  - deployment: Deploy_NonPROD
    displayName: 'Deploy To NonPROD'
    environment: ${{ variables.domain }}-nonprod
    pool:
      vmImage: 'ubuntu-latest'

    strategy:
      runOnce:
        deploy:  
          steps:


           - task: DownloadPipelineArtifact@2
             displayName: Download Build Artifacts
             inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
           - script: dir
             displayName: List ConfigFiles Artifact in Workspace
             workingDirectory: '$(System.DefaultWorkingDirectory)/ConfigFiles'
           - script: dir
             displayName: List ArmTemplates Artifact in Workspace
             workingDirectory: '$(System.DefaultWorkingDirectory)/ArmTemplates'

    # Publish Config files
           - task: AzureCLI@2
             inputs:
               azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
               scriptType: 'pscore'
               scriptLocation: 'inlineScript'
               inlineScript: 'az storage blob upload-batch --source $(System.DefaultWorkingDirectory)/ConfigFiles --destination $(blob_config_destination) --account-name $(blob_configStorage) --overwrite'

    # Publish ADF
           - task: AzurePowerShell@5
             displayName: 'Stop ADF triggers'
             inputs:
              azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/ArmTemplates/PrePostDeploymentScript.ps1'
              ScriptArguments:  -armTemplate "$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json"
                              -ResourceGroupName $(resource_group)
                              -DataFactoryName $(datafactoryname)
                              -predeployment $true
                              -deleteDeployment $false
              azurePowerShellVersion: 'LatestVersion'

           - task: AzureResourceManagerTemplateDeployment@3
             displayName: 'ARM Template deployment: Resource Group scope'
             inputs:
                azureResourceManagerConnection: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
                subscriptionId: '$(azure_subscription_id)'
                resourceGroupName: $(resource_group)
                location: $(region)
                csmFile: '$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json'
                csmParametersFile: '$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateParametersForFactory.json'
                overrideParameters: -factoryName $(datafactoryname) 
                                    -ls_AzureSql_ExampleSource_properties_typeProperties_connectionString_secretName "AzureSqlExampleAdfConnectionString" 
                                    -ls_Blob_ConfigStore_properties_typeProperties_serviceEndpoint $(Blob_ConfigStore_serviceEndpoint)
                                    -ls_ADLS_DataLake_properties_typeProperties_url $(ADLS_DataLake_URL)
                                    -ls_KeyVault_properties_typeProperties_baseUrl $(KeyVault_baseURL)
                deploymentMode: 'Incremental'

           - task: AzurePowerShell@5
             displayName: 'Clean resources and start ADF triggers'
             inputs:
              azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/ArmTemplates/PrePostDeploymentScript.ps1'
              ScriptArguments:  -armTemplate "$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json"
                              -ResourceGroupName $(resource_group)
                              -DataFactoryName $(datafactoryname)
                              -predeployment $false
                              -deleteDeployment $True
              azurePowerShellVersion: 'LatestVersion'

    # Start Testing 
  - deployment: Test_NonPROD
    displayName: 'Testing  NonPROD'
    environment: ${{ variables.domain }}-nonprod
    dependsOn: Deploy_NonPROD
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:  
          steps:
           - checkout: self
           - task: AzureCLI@2
             inputs:
               azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
               ScriptType: 'bash'
               scriptLocation: 'inlineScript'
               inlineScript: az account show 
           
           - task: UsePythonVersion@0
             inputs:
                versionSpec: '$(pythonVersion)'
                githubToken: '$(github_token)'
                addToPath: true

             displayName: Set Python Version

           - bash: |
              pip install pytest pylint pylint-exit pytest-azurepipelines pytest-cov poetry
             displayName: 'Install Pipeline Tools'
           - bash: |
              poetry install 
             displayName: 'Running poetry install'
             workingDirectory:  '$(self_repo_dir)'
           - bash: |
               python -m pytest tests/unit/
             displayName: 'Running py test'
             workingDirectory:  '$(self_repo_dir)'

           - bash: |
               poetry run behave tests/end_to_end/features/ --junit --junit-directory junit/
             displayName: 'Running e2e Test'
             workingDirectory:  '$(self_repo_dir)'
             env:
                  AZURE_SUBSCRIPTION_ID: $(azure_subscription_id)
                  AZURE_RESOURCE_GROUP_NAME: $(resource_group)
                  AZURE_DATA_FACTORY_NAME: $(datafactoryname)
                  AZURE_REGION_NAME: $(region)
                  AZURE_STORAGE_ACCOUNT_NAME: $(blob_configStorage)
                  AZURE_CLIENT_ID: $(azure-client-id)
                  AZURE_CLIENT_SECRET: $(azure-client-secret)
                  AZURE_TENANT_ID: $(azure-tenant-id)
           - task: AzureCLI@2
             inputs:
               azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
               ScriptType: 'bash'
               scriptLocation: 'inlineScript'
               inlineScript: poetry run behave tests/end_to_end/features/ --junit --junit-directory junit/
             env:
                  AZURE_SUBSCRIPTION_ID: $(azure_subscription_id)
                  AZURE_RESOURCE_GROUP_NAME: $(resource_group)
                  AZURE_DATA_FACTORY_NAME: $(datafactoryname)
                  AZURE_REGION_NAME: $(region)
                  AZURE_STORAGE_ACCOUNT_NAME: $(blob_configStorage)
                  AZURE_CLIENT_ID: $(azure-client-id)
                  AZURE_CLIENT_SECRET: $(azure-client-secret)
                  AZURE_TENANT_ID: $(azure-tenant-id)
                 

           - task: PublishTestResults@2
             displayName: 'Publish Test Results'
             inputs:
                testResultsFiles: '**/*.xml'
                searchFolder: 'junit/'
             condition: succeededOrFailed()
  

#############################################################
# Deploy to Prod
#############################################################
- stage: Deploy_Prod_Stage
  dependsOn: 
    - Build_Stage
    - Deploy_NonPROD_Stage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
      - group: amido-stacks-de-pipeline-prod
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
  jobs:
  - deployment: Deploy_PRDO
    displayName: 'Deploy To PROD'
    environment: ${{ variables.domain }}-prod
    pool:
      vmImage: 'ubuntu-latest'

    strategy:
      runOnce:
        deploy:  
          steps:


           - task: DownloadPipelineArtifact@2
             displayName: Download Build Artifacts
             inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
           - script: dir
             displayName: List ConfigFiles Artifact in Workspace
             workingDirectory: '$(System.DefaultWorkingDirectory)/ConfigFiles'
           - script: dir
             displayName: List ArmTemplates Artifact in Workspace
             workingDirectory: '$(System.DefaultWorkingDirectory)/ArmTemplates'

    # Publish Config files
           - task: AzureCLI@2
             inputs:
               azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
               scriptType: 'pscore'
               scriptLocation: 'inlineScript'
               inlineScript: 'az storage blob upload-batch --source $(System.DefaultWorkingDirectory)/ConfigFiles --destination $(blob_config_destination) --account-name $(blob_configStorage) --overwrite'

    # Publish ADF
           - task: AzurePowerShell@5
             displayName: 'Stop ADF triggers'
             inputs:
              azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/ArmTemplates/PrePostDeploymentScript.ps1'
              ScriptArguments:  -armTemplate "$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json"
                              -ResourceGroupName $(resource_group)
                              -DataFactoryName $(datafactoryname)
                              -predeployment $true
                              -deleteDeployment $false
              azurePowerShellVersion: 'LatestVersion'

           - task: AzureResourceManagerTemplateDeployment@3
             displayName: 'ARM Template deployment: Resource Group scope'
             inputs:
                azureResourceManagerConnection: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
                subscriptionId: '$(azure_subscription_id)'
                resourceGroupName: $(resource_group)
                location: $(region)
                csmFile: '$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json'
                csmParametersFile: '$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateParametersForFactory.json'
                overrideParameters: -factoryName $(datafactoryname) 
                                    -ls_AzureSql_ExampleSource_properties_typeProperties_connectionString_secretName "AzureSqlExampleAdfConnectionString" 
                                    -ls_Blob_ConfigStore_properties_typeProperties_serviceEndpoint $(Blob_ConfigStore_serviceEndpoint)
                                    -ls_ADLS_DataLake_properties_typeProperties_url $(ADLS_DataLake_URL)
                                    -ls_KeyVault_properties_typeProperties_baseUrl $(KeyVault_baseURL)
                deploymentMode: 'Incremental'

           - task: AzurePowerShell@5
             displayName: 'Clean resources and start ADF triggers'
             inputs:
              azureSubscription: 'amido.stacks (719637e5-aedd-4fb1-b231-5101b45f8bb5)'
              ScriptType: 'FilePath'
              ScriptPath: '$(System.DefaultWorkingDirectory)/ArmTemplates/PrePostDeploymentScript.ps1'
              ScriptArguments:  -armTemplate "$(System.DefaultWorkingDirectory)/ArmTemplates/ARMTemplateForFactory.json"
                              -ResourceGroupName $(resource_group)
                              -DataFactoryName $(datafactoryname)
                              -predeployment $false
                              -deleteDeployment $True
              azurePowerShellVersion: 'LatestVersion'
 
- stage: Release
  dependsOn:
      - Build_Stage
      - Deploy_Prod_Stage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['create_release'], 'true'))
  variables:
      - group: amido-stacks-infra-credentials-nonprod
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
  jobs:
      - job: CreateGitHubRelease
        pool:
          vmImage: $(pool_vm_image)
        steps:
          # Check out the repo so that it can be tagged
          - checkout: self
            persistCredentials: true

          # Create a tag in the code for this release
          - task: Bash@3
            displayName: Tag Code
            inputs:
              targetType: "inline"
              script: |
                git config user.name "BuildService"
                git config user.email "builder@${COMPANY}.com"
                git tag -a v${VERSION_NUMBER} -m "Release created by Azure DevOps"
                git push origin v${VERSION_NUMBER}
            env:
              COMPANY: $(company)

          # Create a GitHub release with these packages
          - task: GitHubRelease@1
            displayName: Create GitHub Release
            inputs:
              gitHubConnection: $(github_release_service_connection)
              repositoryName: $(github_org)/$(self_repo)
              tag: v${VERSION_NUMBER}
              releaseNotesSource: 'inline'
              releaseNotesInline: "$(version_major).$(version_minor).$(version_revision)"
              tagSource: 'gitTag'
              changeLogCompareToRelease: 'lastFullRelease'
              changeLogType: 'commitBased'
