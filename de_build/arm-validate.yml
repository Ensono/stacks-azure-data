parameters:
  - name: self_repo_adf_dir
    type: string


steps:

- script: |
    mkdir $(Pipeline.Workspace)/ARM_TTK_Download
    curl -L -o $(Pipeline.Workspace)/ARM_TTK_Download/arm-ttk.zip https://aka.ms/arm-ttk-latest
  displayName: 'Download ARM TTK'
- script: |
    ls $(Pipeline.Workspace)/ARM_TTK_Download
  displayName: 'Verify: Check downloaded files'

- task: ExtractFiles@1
  displayName: 'Extract ARM TTK'
  inputs:
    archiveFilePatterns: '$(Pipeline.Workspace)/ARM_TTK_Download/arm-ttk.zip'
    destinationFolder: '$(Pipeline.Workspace)/ARM_TTK'
# - script: |
#     ls $(Pipeline.Workspace)/ARM_TTK
#   displayName: 'List ARM TTK'
- pwsh: |
    Import-Module $(Pipeline.Workspace)/ARM_TTK/arm-ttk/arm-ttk.psd1 -Verbose
    $templatePath = "$(self_repo_adf_dir)/ARMTemplateForFactory.json"
    $templateParametersPath = "$(self_repo_adf_dir)/ARMTemplateParametersForFactory.json"
    $testOutputtemplate = @(Test-AzTemplate -TemplatePath "$templatePath" -Skip "DeploymentTemplate-Schema-Is-Correct", "Template-Should-Not-Contain-Blanks","Variables-Must-Be-Referenced" ,"DeploymentTemplate-Must-Not-Contain-Hardcoded-Uri","DependsOn-Best-Practices","IDs-Should-Be-Derived-From-ResourceIDs")
    $testOutputParameters = @(Test-AzTemplate -TemplatePath "$templateParametersPath" )
    $testOutput = $testOutputParameters + $testOutputtemplate
    $testOutput
    
    if ($testOutput | ? {$_.Errors }) {
        exit 1 
    } else {
        Write-Host "##vso[task.setvariable variable=result.best.practice]$true"
        exit 0
    } 
  errorActionPreference: continue
  failOnStderr: true
  displayName: 'Run Best Practices Tests'
  continueOnError: true

