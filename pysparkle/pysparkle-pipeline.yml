name: "$(Build.SourceBranchName)-init"

#trigger:
#- main #collaboration branch
#- none

pr:
  branches:
    include:
      - "main"
  paths:
    include:
      - pysparkle/*
      - pysparkle/pysparkle-pipeline.yml
trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - pysparkle/*
      - pysparkle/pysparkle-pipeline.yml
variables:
  - template: ../de_build/job-pipeline-vars.yml
  - template: ../de_build/air-data-testing-vars.yml
  - template: ../build/version-data-vars.yml
  - name: self_repo_pysparkle_dir
    value: $(self_repo_dir)/pysparkle
  - name: pythonVersion
    value: "3.10.10"
  - name: test_unit_path
    value: "$(self_repo_dir)/pysparkle/tests/unit/"
  - name: junit_path
    value: "$(self_repo_dir)/pysparkle/junit/"
  - name: dbfs_destination #update job name
    value: "dbfs:/FileStore/jars"
  - name: self_repo_spark_src
    value: "de_workloads/$(jobtype)/$(job)/spark_jobs"

pool:
  name: $(agentpool_name)
stages:
  - stage: Build_Stage
    variables:
      - group: amido-stacks-de-pipeline-nonprod

    jobs:
      - job: Build_Pysparkle
        displayName: Build_Pysparkle
        steps:
          - task: Bash@3
            displayName: "Clean Workspace"
            inputs:
              targetType: "inline"
              script: |
                echo "Cleaning workspace..."
                sudo rm -rf $(Build.SourcesDirectory)/*
          - template: ../build/azDevOps/templates/air-infrastructure-data-setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersion)
              githubToken: $(github_token)
              addToPath: true
            displayName: Set Python Version
          - bash: |
              pip install pylint pylint-exit pytest-cov poetry
            displayName: Install Pipeline Tools
          - bash: |
              poetry install
            displayName: Install Dependencies
            workingDirectory: $(self_repo_pysparkle_dir)
          - bash: |
              poetry run pytest -rf -v tests -k unit
            displayName: "Run Unit Tests"
            workingDirectory: "$(self_repo_pysparkle_dir)"
          - bash: |
              poetry build
            displayName: Build Project
            workingDirectory: "$(self_repo_pysparkle_dir)/pysparkle"
          - bash: |
              mv $(self_repo_pysparkle_dir)/dist/*.whl $(self_repo_pysparkle_dir)/dist/pysparkle-latest-py3-none-any.whl
            displayName: "Rename Pyspark wheel package to latest"
          - task: CopyFiles@2
            displayName: Copy Whl
            inputs:
              SourceFolder: "$(self_repo_pysparkle_dir)/dist/"
              Contents: "*.whl"
              TargetFolder: "$(Build.ArtifactStagingDirectory)/pysparklewheel"
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: pysparklewheel"
            inputs:
              ArtifactName: pysparklewheel
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/pysparklewheel"

  #############################################################
  # Deploy to non Prod
  #############################################################
  - stage: Deploy_NonPROD_Stage
    variables:
      - group: amido-stacks-de-pipeline-nonprod
    dependsOn: Build_Stage
    jobs:
      - deployment: Deploy_NonPROD
        displayName: "Deploy To NonPROD"
        environment: ${{ variables.domain }}-nonprod
        pool:
          name: $(agentpool_name)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download Build Artifacts
                  inputs:
                    targetPath: "$(System.DefaultWorkingDirectory)"
                - script: dir
                  displayName: List Artifact in Workspace
                  workingDirectory: "$(System.DefaultWorkingDirectory)/pysparklewheel"
                - task: AzureKeyVault@2
                  inputs:
                    azureSubscription: "Stacks.Pipeline.Builds"
                    KeyVaultName: $(keyvault_name)
                    SecretsFilter: "*"
                    RunAsPreJob: false
                  displayName: "Get Keyvault Secrets"
                #             - script: |
                #                         echo "$(databricks-host)
                #                         $(databricks-token)" | databricks configure --token
                #                 displayName: Configure Databricks-cli
                #               - script: |
                #                         echo Destination is /FileStore/jars
                #                         echo Source is $(System.DefaultWorkingDirectory)/pysparklewheel/
                #                         databricks fs cp -r --overwrite $(System.DefaultWorkingDirectory)/pysparklewheel/*.whl dbfs:/FileStore/jars/pysparkle-latest-py3-none-any.whl
                #                 displayName: Upload whl
                - task: Bash@3
                  displayName: "TaskCTL: Databricks"
                  inputs:
                    targetType: inline
                    script: taskctl databricks
                  env:
                    # Dotnet Build
                    DATABRICKS_HOST: "$(databricks-host)"
                    DATABRICKS_TOKEN: "$(databricks-token)"
                    DATABRICKS_DBFS_LOCATION: "$(dbfs_destination)" #self_repo_spark_src
                    DATABRICKS_SOURCE_LOCATION: "./pysparklewheel/"

  #############################################################
  # Deploy to Prod
  #############################################################
  - stage: Deploy_Prod_Stage
    dependsOn:
      - Build_Stage
      - Deploy_NonPROD_Stage
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      - group: amido-stacks-de-pipeline-prod
    jobs:
      - deployment: Deploy_PRDO
        displayName: "Deploy To PROD"
        environment: ${{ variables.domain }}-prod
        pool:
          name: $(agentpool_name)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download Build Artifacts
                  inputs:
                    targetPath: "$(System.DefaultWorkingDirectory)"
                - script: dir
                  displayName: List ArmTemplates Artifact in Workspace
                  workingDirectory: "$(System.DefaultWorkingDirectory)/pysparklewheel"
                - task: AzureKeyVault@2
                  inputs:
                    azureSubscription: "Stacks.Pipeline.Builds"
                    KeyVaultName: $(keyvault_name)
                    SecretsFilter: "*"
                    RunAsPreJob: false
                  displayName: "Get Keyvault Secrets"
                - script: |
                    echo "$(databricks-host)
                    $(databricks-token)" | databricks configure --token
                  displayName: Configure Databricks-cli
                - script: |
                    echo Destination is /FileStore/jars
                    echo Source is $(System.DefaultWorkingDirectory)/pysparklewheel/
                    databricks fs cp -r --overwrite $(System.DefaultWorkingDirectory)/pysparklewheel/*.whl dbfs:/FileStore/jars/pysparkle-latest-py3-none-any.whl
                  displayName: Upload whl

  - stage: Release
    dependsOn:
      - Build_Stage
      - Deploy_Prod_Stage
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['create_release'], 'true'))
    jobs:
      - job: CreateGitHubRelease
        pool:
          name: $(agentpool_name)
        steps:
          # Check out the repo so that it can be tagged
          - checkout: self
            persistCredentials: true

          - script: |
              lastTag=$(git tag --sort=-creatordate | head -n 1)
              if [[ -z $lastTag ]]; then
                major=$(version_major)
                minor=$(version_minor)
                revision=$(version_revision)
                echo "Last Tag: NOT Present"
              else
                IFS='.' read -ra versionParts <<< "${lastTag#v}"
                major="${versionParts[0]}"
                minor="${versionParts[1]}"
                lastrevision="${versionParts[2]}"
                revision=$((lastrevision + 1))
                echo "Last Tag: $lastTag"
              fi
              newVersion="${major}.${minor}.${revision}"
              echo "New Version: $newVersion"
              echo "##vso[task.setvariable variable=major]$major"
              echo "##vso[task.setvariable variable=minor]$minor"
              echo "##vso[task.setvariable variable=revision]$revision"
              echo "##vso[task.setvariable variable=newVersion]$newVersion"
            displayName: Determine New Version

          - task: Bash@3
            displayName: Tag Code
            inputs:
              targetType: "inline"
              script: |
                commit=$(Build.SourceVersion)
                tag=$(git tag --contains $commit)
                if [ -z "$tag" ]; then
                  echo "Tag does not exist for the commit"
                  git config user.name "BuildService"
                  git config user.email "builder@${COMPANY}.com"
                  echo "Creating tag v${newVersion}..."
                  git tag -a "v${newVersion}" -m "Release created by Azure DevOps"
                  git push origin "v${newVersion}"
                  echo "##vso[task.setvariable variable=ShouldCreateRelease]True"
                else
                  echo "Tag '$tag' already exists for the commit.Skipping tag creation"
                  echo "##vso[task.setvariable variable=ShouldCreateRelease]false"
                fi
            env:
              COMPANY: $(company)
              newVersion: $(newVersion)

          # #           # Create a GitHub release with these packages
          - task: GitHubRelease@1
            displayName: Create GitHub Release
            inputs:
              gitHubConnection: $(github_release_service_connection)
              repositoryName: $(github_org)/$(self_repo)
              tag: v${newVersion}
              releaseNotesSource: "inline"
              releaseNotesInline: "$(major).$(minor).$(revision)"
              tagSource: "gitTag"
              changeLogCompareToRelease: "lastFullRelease"
              changeLogType: "commitBased"
            condition: eq(variables['ShouldCreateRelease'], 'true')
