name: "$(Build.SourceBranchName)-init"

# Configure parameters for running the build
parameters:
  - name: force_deploy
    displayName: Force deploy regardless of branch
    type: boolean
    default: false
  - name: deploy
    displayName: Deploy Environment
    type: boolean
    default: true
  - name: destroy
    displayName: Destroy Environment
    type: boolean
    default: false
  - name: upload
    displayName: Upload generated files
    type: boolean
    default: false

  - name: stages
    type: object
    default:
      - stage: NonProd
        dependsOn: Build
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')
        environment_shortname: nonprod
        domain_internal: $(base_domain_internal_nonprod)
        deployment_infra: AppInfraNonProd

pr: none

trigger: none

variables:
  - template: ../../../version-data-vars.yml
  - template: ../../../common-vars.yml
  - template: air-infrastructure-data-network-vars.yml
  - name: network_domain
    value: $(domain)-network
  - name: tf_state_key
    value: $(network_domain)
  - name: TF_FILE_LOCATION
    value: /app/deploy/azure/networking

stages:
  - stage: Build
    variables:
      - group: ensono-sp-creds

    jobs:
      - job: Validate
        pool:
          vmImage: $(pool_vm_image)

        steps:
          - template: ../../templates/air-infrastructure-data-setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Setup"
            inputs:
              targetType: inline
              script: taskctl setup
            env:
              DOCKER_IMAGE_TAG: $(version_number)

          - task: Bash@3
            displayName: "TaskCTL: Lint"
            inputs:
              targetType: inline
              script: taskctl lint
            env:
              # Dotnet Build
              TF_FILE_LOCATION: $(TF_FILE_LOCATION)
              CLOUD_PLATFORM: "$(cloud_platform)"

  # Iterate around the stages that have been specified. This is based on the parameters and what branch
  # of the the repo that the deployment is being run from
  - ${{ each stage in parameters.stages }}:
      - stage: ${{ stage.stage }}
        dependsOn: ${{ stage.dependsOn }}
        condition: and(succeeded(), or(${{ stage.condition }}, ${{ parameters.force_deploy }}))
        variables:
          - group: ensono-sp-creds

        jobs:
          - deployment: Infra
            pool:
              vmImage: $(pool_vm_image)
            environment: ${{ variables.network_domain }}
            strategy:
              runOnce:
                deploy:
                  steps:
                    - template: ../../templates/air-infrastructure-data-setup.yml
                      parameters:
                        TaskctlVersion: ${{ variables.TaskctlVersion }}

                    # Create a tfvars file for the values
                    # This is so that variables can be set and reused as required
                    - task: Bash@3
                      displayName: Create Terraform variables file
                      inputs:
                        targetType: inline
                        script: |
                          taskctl infra:vars
                      env:
                        TF_FILE_LOCATION: $(TF_FILE_LOCATION)
                        TF_VAR_enable_private_networks: true
                        TF_VAR_link_dns_network: true
                        TF_VAR_name_company: $(company)
                        TF_VAR_name_component: $(component)
                        TF_VAR_name_project: $(project)
                        TF_VAR_resource_group_location: $(region)
                        TF_VAR_stage: $(Environment.ShortName)

                    # Upload the Terraform variables file and the plan for debugging
                    - ${{ if eq(parameters.upload, true) }}:
                        - template: ../templates/upload.yml

                    # remove the infrastructure if the parameter has been set
                    - ${{ if eq(parameters.destroy, true) }}:
                        - task: Bash@3
                          displayName: Destroy environment
                          inputs:
                            targetType: inline
                            script: |
                              taskctl infrastructure_destroy
                          env:
                            ENV_NAME: ${{ stage.environment_shortname }}

                            # Azure Authentication
                            CLOUD_PLATFORM: "$(cloud_platform)"
                            STAGE: networking

                            TF_FILE_LOCATION: $(TF_FILE_LOCATION)
                            TF_BACKEND_INIT: "key=$(tf_state_key),storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg),container_name=$(tf_state_container)"
                            TF_BACKEND_DESTROY_PLAN: '-input=false,-out="destroy.tfplan"'

                    - ${{ if eq(parameters.deploy, true) }}:
                        - task: Bash@3
                          displayName: "Taskctl: Infrastructure"
                          inputs:
                            targetType: inline
                            script: taskctl infrastructure
                            informationPreference: continue
                          env:
                            ENV_NAME: ${{ stage.environment_shortname }}

                            # Azure Authentication
                            CLOUD_PLATFORM: "$(cloud_platform)"
                            STAGE: networking

                            # Terraform Backend Configuration
                            TF_FILE_LOCATION: $(TF_FILE_LOCATION)
                            TF_BACKEND_INIT: "key=$(tf_state_key),storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg),container_name=$(tf_state_container)"
