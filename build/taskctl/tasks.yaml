tasks:

  buildnumber:
    context: powershell
    description: Update the build number
    command:
      - Update-BuildNumber

  lint:yaml:
    context: powershell-python
    description: Perform YAML linting
    command:
      - Invoke-YamlLint

  lint:terraform:format:
    context: powershell
    description: Perform Terraform format check
    command:
      - Invoke-Terraform -Format -Path $env:TF_FILE_LOCATION

  lint:terraform:validate:
    context: powershell
    description: Perform Terraform validation
    command:
      - Invoke-Terraform -Validate -Path $env:TF_FILE_LOCATION

  # Infrastructure tasks
  infra:init:
    context: powershell
    description: Initialise Terraform for Azure
    command:
      - Invoke-Terraform -Init -backend "$env:TF_BACKEND_ARGS" -Path $env:TF_FILE_LOCATION -Debug
      - Invoke-Terraform -Workspace -Arguments $env:ENV_NAME -Path $env:TF_FILE_LOCATION -Debug

  infra:plan:
    context: powershell
    description: Plan Terraform
    command:
      - Invoke-Terraform -Plan -Path $env:TF_FILE_LOCATION -Arguments "-input=false","-out=tfplan" -Debug 
  infra:apply:
    context: powershell
    description: Apply Terraform Plan
    command:
     # - Push-Location $env:TF_FILE_LOCATION && Invoke-Terraform -Apply -Path tfplan -Debug | out-null
       - Push-Location $env:TF_FILE_LOCATION && Invoke-Terraform -Apply -Path tfplan -Debug 

  publish:github:
    context: powershell
    description: Publish Release to GitHub
    command:
      - Publish-GitHubRelease -artifactsList "$env:ARTIFACTS_LIST"
    env:
      generateReleaseNotes: $true
      # PUBLISH_RELEASE: $true

  update:dashboard:
    context: powershell
    description: Update the Deployment Dashboard
    command:
      - Update-InfluxDashboard
    # yamllint disable rule:comments-indentation
    # env:
    # PUBLISH_RELEASE: $true
    # yamllint enable rule:comments-indentation

  debug:env:
    context: powershell
    description: Debugging task to show the environment variables in the container
    command:
      - dir env:/

  debug:location:
    context: powershell
    command:
      - Write-Host "***** DEBUG *****" && get-childitem -filter "*opencover.xml" -recurse

  debug:sleep:
    context: powershell
    command:
      - echo "Sleeping for {{ .sleep }}"
      - sleep {{ .sleep }}
    variables:
      sleep: 30

# Databricks tasks
  databricks:connect:
    context: powershell
    description: Configure databricks-cli
    command:
      #- Invoke-Terraform -Workspace -Arguments $env:ENV_NAME -Path $env:TF_FILE_LOCATION -Debug
       - |
          $args = @"
          $env:DATABRICKS_HOST
          $env:DATABRICKS_TOKEN
          "@
          Write-Output $args | & databricks configure --token 
          Write-Output "`nDatabricks workspace list:"
          & databricks workspace list
          Write-Output "1--->$env:DATABRICKS_HOST"
          Write-Output "1---$env:DATABRICKS_TOKEN"
          Write-Output "1---$env:DATABRICKS_SOURCEPATH"
          Write-Output "1---$env:DATABRICKS_DBFS_LOCATION"
          Write-Output "1---$env:DATABRICKS_SOURCE_LOCATION"
          Write-Output "--------------"

  databricks:createfolder:
    context: powershell
    description: Create DBFS Folder If Not Exists
    command:
     # - Invoke-Terraform -Plan -Path $env:TF_FILE_LOCATION -Arguments "-input=false","-out=tfplan" -Debug | out-null
       - |
          Write-Output "`nDatabricks workspace list2:"
          & databricks workspace list
          $destinationPath="$env:DATABRICKS_DBFS_DESTINATIONPATH"
          Write-Output "destinationPath--->$destinationPath"
          Write-Output "destinationPath2--->"$env:DATABRICKS_DBFS_DESTINATIONPATH""
          $folderExists = $(databricks fs ls $env:DATABRICKS_DBFS_DESTINATIONPATH 2>&1)
          Write-Output "folder_exists: $folderExists"
          if ($folderExists -like "*No file or directory exists*") {
              Write-Output "Creating Folder"
              # $(databricks fs mkdirs $env:DATABRICKS_DBFS_DESTINATIONPATH)
          }
          else {
              Write-Output "Folder Exists"
          }

  databricks:upload:
    context: powershell
    description: Upload Spark Jobs or Whl to DBFS
    command:
      # - Push-Location $env:TF_FILE_LOCATION && Invoke-Terraform -Apply -Path tfplan -Debug 
        - |    
           $destinationPath=$env:DATABRICKS_DBFS_DESTINATIONPATH
           $self_repo_sparkjob_dir=$env:DATABRICKS_SOURCEPATH        
           Write-Output "Destination is $destinationPath"
           Write-Output "Source is $self_repo_sparkjob_dir"
                       
           Write-Output "Destination is $env:DATABRICKS_DBFS_DESTINATIONPATH"
           Write-Output "Source is $env:DATABRICKS_SOURCEPATH "
            $files = Get-ChildItem -Path $env:DATABRICKS_SOURCEPATH
            foreach ($file in $files) {
                if ($file -is [System.IO.FileInfo]) {
                    $destination = "$env:DATABRICKS_DBFS_DESTINATIONPATH/$($file.Name)"
                    & databricks fs cp --overwrite "$($file.FullName)" "$env:DATABRICKS_DBFS_DESTINATIONPATH/$($file.Name)"
                }
            }